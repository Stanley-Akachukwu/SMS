@page "/users"
@using Microsoft.AspNetCore.Http
@using SMS.Common.Dtos.Departments
@using SMS.Common.Dtos.Roles
@using SMS.Common.Enums
@using SMS.Web.Services.Roles
@using SMS.Web.Services.Toasts
@using SMS.Web.Services.Users

@using static Microsoft.FluentUI.AspNetCore.Components.Icons.Filled.Size12



<FluentLayout Style="margin-top: 10px;margin-bottom: 1px;">
    @if (!loading && ShowHeader)
    {
        <FluentHeader>
            <h3>Users</h3>
            <FluentSpacer />
            <FluentButton IconStart="@(new Icons.Regular.Size16.Add())" OnClick="@(() => AddNewUser())">Add</FluentButton>
        </FluentHeader>
    }

    <FluentStack Orientation="Orientation.Vertical" Width="100%">
        @if (ShowBodyContent)
        {
            <FluentBodyContent>
                @if (loading)
                {
                    <Progress />
                }
                else if (users != null)
                {
                    <div id="datagrid-container">
                        <FluentStack Orientation="Orientation.Vertical" Width="100%">
                            <FluentDataGrid Items="users!.AsQueryable()"
                            Pagination="@pagination"
                            RowSize="@rowSize"
                            AutoItemsPerPage="true"
                            Style="overflow-y:hidden;">
                                <PropertyColumn Property="@(c => c.FirstName)" Sortable="true" />
                                <PropertyColumn Property="@(c => c.SurName)" Sortable="true" />
                                <PropertyColumn Property="@(c => c.UserName)" Sortable="true" />
                                <PropertyColumn Property="@(c => c.Role.Name)" Sortable="true" />
                                <PropertyColumn Property="@(c => c.Department.Name)" Sortable="true" />

                                <TemplateColumn Title="Actions">
                                    <FluentButton IconStart="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditUser(context))" />
                                    <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteUser(context))" />
                                </TemplateColumn>
                            </FluentDataGrid>
                            <FluentPaginator State="@pagination" />
                        </FluentStack>
                    </div>
                }
            </FluentBodyContent>
        }
    </FluentStack>
    @if (ShowFooter)
    {
        <FluentFooter Style="@("height: 40px; color: black; text-align: center;")">
            Footer
        </FluentFooter>
    }

</FluentLayout>


@code {
    [Inject] private IJSRuntime _jSRuntime { get; set; }
    [Inject] private NavigationManager _navigation { get; set; }
    [Inject] private IRolePermissionsService _rolePermissionService { get; set; }
    [Inject] private IUsersService _uersService { get; set; }
    [Inject] ISmsCoreToastService _toastService { get; set; }
    [Inject] IDialogService _dialogService { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    DataGridRowSize rowSize = DataGridRowSize.Small;
    IQueryable<RoleDto>? roles;
    IQueryable<UserDto>? users;
    public List<DepartmentDto> departments { get; set; } = new List<DepartmentDto>();
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    bool loading = false;
    bool ShowHeader = true;
    bool ShowNavMenu = true;
    bool ShowBodyContent = true;
    bool ShowFooter = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;

            var loadDataTask = LoadData();
            var getDepartmentTask = GetDepartments();
            var getRolesTask = LoadRoles();


            await Task.WhenAll(loadDataTask, getDepartmentTask, getRolesTask);
        }
        finally
        {
            loading = false;
        }
    }
    
    private async Task LoadData()
    {
        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
        loading = true;

        var usersResult = await _uersService.GetUsersAsync(cts.Token);
        users = usersResult.Data.AsQueryable();
        loading = false;
    }
    private async Task LoadRoles(string? id = "all")
    {
        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
        var rolesResult = await _rolePermissionService.GetRolesAsync(cts.Token);
        if (rolesResult?.IsSuccess == true && rolesResult.Data != null)
        {
            roles = rolesResult.Data.AsQueryable();
        }
    }
    public async Task GetDepartments()
    {
        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
        var deptResult = await _uersService.GetDepartmentsAsync(cts.Token);
        departments = deptResult.Data.ToList();
    }
    private async Task AddNewUser()
    {
        var user = new UserDto();
        user.Roles = roles?.ToList();
        user.Action = SMSCoreAction.Create;
        user.Departments = departments;

        DialogParameters<UserDto> parameters = new()
            {
                Title = $"Create User",
                Alignment = HorizontalAlignment.Right,
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };
        var dialog = await _dialogService.ShowPanelAsync<EditUserPanel>(user, parameters);
        var dialogResult = await dialog.Result;
        await HandleEditRoleDialogResult(dialogResult, user);
    }
    private async Task EditUser(UserDto user)
    {
        // await LoadRoles(userSetup.IdentityUserId);
        user.Roles = roles?.ToList();
        user.Action = SMSCoreAction.Edit;
        user.Departments = departments;

        DialogParameters<UserDto> parameters = new()
            {
                Title = $"Edit User",
                Alignment = HorizontalAlignment.Right,
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };
        var dialog = await _dialogService.ShowPanelAsync<EditUserPanel>(user, parameters);
        var dialogResult = await dialog.Result;
        await HandleEditRoleDialogResult(dialogResult, user);
    }
    private async Task DeleteUser(UserDto user)
    {
        // Check if the item is null
        if (user is null)
        {
            return;
        }

        // Create and show a dialog to confirm the delete
        IDialogReference dialog = await _dialogService.ShowConfirmationAsync(
            $"Are you sure you want to delete the user '{user.UserName}'?",
            "Yes",
            "No",
            "Delete user?");
        DialogResult result = await dialog.Result;

        // // If cancelled, return
        // if (result.Cancelled)
        // {
        //     return;
        // }

        // try
        // {
        //     await _uersService.de(role?.Id, CancellationToken.None);
        //     await LoadData();
        // }
        // catch (Exception exc)
        // {
        //     string errorMessage = exc.InnerException?.Message ?? exc.Message;
        //     await _dialogService.ShowErrorAsync("Error", errorMessage);
        // }
    }
   

    private async Task HandleEditRoleDialogResult(DialogResult result, UserDto user)
    {
        var bpFont = new Icons.Regular.Size20.Backpack();
        // If cancelled, return
        if (result.Cancelled)
        {
            _toastService.ShowToastMessage("User Setup Error", "Internal Server Error", Color.Error, ToastIntent.Error);
            return;
        }
        loading = true;

        user.CreatedByUserId = Ulid.NewUlid().ToString();
        user.Roles = new List<RoleDto>();
        user.Departments = new List<DepartmentDto>();

        var rsp = await _uersService.CreateOrUpdateUserAsync(user, CancellationToken.None);

        if (rsp?.IsSuccess == true && result.Data != null && rsp?.StatusCode != StatusCodes.Status500InternalServerError)
        {
            loading = false;
            await LoadData();
            _toastService.ShowToastMessage("User Setup", "Saved Successfully", Color.Success, ToastIntent.Success);
        }
        else
        {
            await LoadData();
            _toastService.ShowToastMessage("Error", rsp?.ErrorMessage, Color.Error, ToastIntent.Error);
        }
    }
}

