@using SMS.Common.Dtos.Schools
@implements IDialogContentComponent<SchoolClassDto>

<FluentDialogHeader ShowDismiss="false">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical" Width="100%">
        <FluentTextField @bind-Value="Content.Name" style="width: 100%;" Placeholder="Class Name"><h6>Class Name:</h6></FluentTextField>
        <FluentTextField @bind-Value="Content.Description" style="width: 100%;"  Placeholder="Description"><h6>Description:</h6></FluentTextField>
        <h6>Setting:</h6>
        <FluentSelect Id="role" name="role" Value="@selectedSettingId" ValueChanged="@(e => SettingIDHandler(e))" TOption="string" Height="300px" style="width: 100%;">
            <FluentOption Value="">Select Setting</FluentOption>
            @foreach (var setting in Content.Settings)
            {
                <FluentOption Value="@setting.Id.ToString()">@setting.Name</FluentOption>
            }
        </FluentSelect>
        @if (string.IsNullOrEmpty(selectedSettingId))
        {
            <div style="color:red">Setting is required.</div>
        }

        <h6>School:</h6>
        <FluentSelect Id="role" name="role" Value="@selectedSchoolId" ValueChanged="@(e => SchoolIDHandler(e))" TOption="string" Height="300px" style="width: 100%;">
            <FluentOption Value="">Select School</FluentOption>
            @foreach (var school in Content.Schools)
            {
                <FluentOption Value="@school.Id.ToString()">@school.Name</FluentOption>
            }
        </FluentSelect>
        @if (string.IsNullOrEmpty(selectedSchoolId))
        {
            <div style="color:red">School is required.</div>
        }
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Save())" OnClick="@SaveAsync">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@code {
    [Parameter]
    public SchoolClassDto Content { get; set; } = new();

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    private string selectedSettingId = "";
    private string selectedSchoolId = "";

    protected override async Task OnInitializedAsync()
    {
        if (Content.SettingId != null)
        {
            this.selectedSettingId = Content?.Setting?.Id ?? Content?.SettingId;
            SettingIDHandler(this.selectedSettingId);
        }
        if (Content.SchoolId != null)
        {
            this.selectedSchoolId = Content?.School?.Id! ?? Content?.SchoolId;
            SchoolIDHandler(this.selectedSchoolId);
        }
    }
    private async Task SaveAsync()
    {
        if (string.IsNullOrWhiteSpace(Content.Name))
        {
            return;
        }
        await Dialog.CloseAsync(Content);
    }
    private void SettingIDHandler(string id)
    {
        if (!string.IsNullOrEmpty(id))
        {
            Content.Setting = Content.Settings.FirstOrDefault(r => r.Id == id);
            this.selectedSettingId = id;
            Content.SettingId = this.selectedSettingId;
        }
    }
    private void SchoolIDHandler(string id)
    {
        if (!string.IsNullOrEmpty(id))
        {
            Content.School = Content?.Schools?.FirstOrDefault(r => r.Id == id);
            this.selectedSchoolId = id;
            Content.SchoolId = this.selectedSchoolId;
        }
    }
    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}
