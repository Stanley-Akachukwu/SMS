@using System.Security.Claims
@using SMS.Common.Dtos.Workflows
@using SMS.Common.Enums
@using SMS.Common.Helpers
@implements IDialogContentComponent<WorkflowDto>

<FluentDialogHeader ShowDismiss="false">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical" Width="100%">
        <FluentTextField @bind-Value="Content.Name" style="width: 100%;" Placeholder="Name"><h6> Name:</h6></FluentTextField>
        <FluentTextField @bind-Value="Content.RegLink" style="width: 100%;" Placeholder="Reg. Link"><h6>Reg. Link:</h6></FluentTextField>
        <FluentTextField @bind-Value="Content.Description" style="width: 100%;" Placeholder="Description"><h6>Description:</h6></FluentTextField>
        <FluentTextField @bind-Value="Content.Session" style="width: 100%;" Placeholder="Session"><h6>Session:</h6></FluentTextField>
        <h6>Level:</h6>
        <FluentSelect Id="role" name="role" Value="@selectedWorkflowType" ValueChanged="@(e => WorkflowTypeHandler(e))" TOption="string" Height="300px" style="width: 100%;">
            <FluentOption Value="">Select Workflow Type</FluentOption>
            @foreach (var k in workflowTypes)
            {
                <FluentOption Value="@k?.Id.ToString()">@k?.Name</FluentOption>
            }
        </FluentSelect>
        @if (string.IsNullOrEmpty(selectedWorkflowType))
        {
            <div style="color:red">Workflow Type is required.</div>
        }
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Save())" OnClick="@SaveAsync">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@code {

    [Parameter]
    public WorkflowDto Content { get; set; } = new();

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    private string selectedWorkflowType = "";
    public List<EnumDto> workflowTypes = new List<EnumDto>();
    protected override async Task OnInitializedAsync()
    {
        workflowTypes = EnumHelper.GetEnumList<WorkflowType>();
        var type = (int)Content.WorkflowType;
        WorkflowTypeHandler(type.ToString());
    }

    private async Task SaveAsync()
    {
        if (string.IsNullOrWhiteSpace(Content.Name))
        {
            return;
        }
        await Dialog.CloseAsync(Content);
    }
    private void WorkflowTypeHandler(string type)
    {
        Content.WorkflowType = (WorkflowType)int.Parse(type);
        selectedWorkflowType = type;
    }
    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}
