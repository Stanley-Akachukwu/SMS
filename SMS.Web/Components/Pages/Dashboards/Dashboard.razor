@page "/dashboard"
@using SMS.Common.Dtos.Dashboards
@using SMS.Web.Components.Shared
@using System.Security.Claims
@using System.Net

<PageTitle>Dashboard</PageTitle>



<FluentStack Style="margin-bottom: 24px;" HorizontalAlignment="HorizontalAlignment.Stretch">

    <FluentStack Horizontal Wrap>
        @if (loading)
        {
            <Progress />
        }
        else if (dashboardItems != null)
        {
            @foreach (var item in dashboardItems)
            {
                var icon = (Icon)GetIcon(item.IconSet, item.IconName, item.IconSize);
                <FluentCard Style="width: 200px;height:150px;">
                    <FluentHeader>
                        <FluentNavLink Href="@item.Href"
                        Icon="@icon"
                        IconColor="@(Enum.Parse<Color>(item.IconColor))">
                            @item.Title
                        </FluentNavLink>
                    </FluentHeader>

                    <div class="card-body">
                        @foreach (var metric in item.Metrics)
                        {
                            <div class="body-item">@metric.Label: @metric.Value</div>
                        }
                    </div>
                </FluentCard>
            }
        }

    </FluentStack>

</FluentStack>  

@code {
    [Inject] private SMSApiClient SMSApiClient { get; set; }
    [Inject] private NavigationManager _navigation { get; set; }
    [Inject] private IUserAuthState _userAuthState { get; set; }

    bool loading = false;
    private List<DashboardItemDto> dashboardItems = new();
    string currentUser = string.Empty;
    private object GetIcon(string set, string name, string size)
    {
        try
        {
            var fullNamespace = $"Microsoft.FluentUI.Icons.{set}.{size}";
            var iconType = Type.GetType($"{fullNamespace}+{name}, Microsoft.FluentUI.Icons");

            return iconType != null ? Activator.CreateInstance(iconType) : null;
        }
        catch
        {
            return null;  
        }
    }
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        
        try
        {
            if (!await _userAuthState.IsAuthenticated())
            {
                _navigation.NavigateTo("/login/dashboard");
            }

            if (await _userAuthState.IsAuthenticated())
            {
                var loadDashboardTask = LoadData();
                var getCurrentUserTask = GetCurrentUser();
                await Task.WhenAll(loadDashboardTask, getCurrentUserTask);
            }

        }
        finally
        {
            loading = false;
        }
    }
    private async Task GetCurrentUser()
    {
        currentUser = await _userAuthState.GetCurrentUser();
    }
    private async Task LoadData(string? department = "all")
    {
        var rsp = new ApiResponse<List<DashboardItemDto>>();
        try
        {
            rsp = await SMSApiClient.GetFromJsonAsync<ApiResponse<List<DashboardItemDto>>>($"/api/dashboards/{department}", currentUser);
            if (rsp?.StatusCode == 401)
            {
                _navigation.NavigateTo($"/login/dashboard");
                return;
            }

            if (rsp?.IsSuccess == true && rsp.Data is not null)
            {
                loading = false;
                dashboardItems = rsp.Data;
            }
        }
        catch (HttpRequestException httpEx)
        {
            var statusCode = httpEx.StatusCode;
            if (httpEx.StatusCode == HttpStatusCode.Unauthorized)
            {
                _navigation.NavigateTo($"/login");
                return;
            }
            loading = false;
        }
        catch (Exception ex)
        {
            loading = false;
            return;
        }
       
        
    }
}

