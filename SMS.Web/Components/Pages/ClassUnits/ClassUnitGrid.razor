@page "/class-units"


@using SMS.Common.Dtos.Schools
@using SMS.Common.Enums
@using SMS.Web.Components.Shared
@using SMS.Web.Services.Toasts

<FluentLayout Style="margin-top: 10px;">
    <FluentHeader>
        <h3>Class Units</h3>
        <FluentSpacer />
        <FluentButton IconStart="@(new Icons.Regular.Size16.Add())" OnClick="@AddNew">Add</FluentButton>
    </FluentHeader>

    <FluentStack Orientation="Orientation.Vertical" Width="100%">
        @if (loading)
        {
            <Progress />
        }
        else if (ClassUnits != null)
        {
            <FluentDataGrid Items="ClassUnits!.AsQueryable()" RowSize="DataGridRowSize.Small" AutoItemsPerPage="true" Style="overflow-y:hidden;">
                <PropertyColumn Property="@(c => c.Name)" Title="Name" Sortable="true" />
                <PropertyColumn Property="@(c => c.CodeName)" Title="Code Name" Sortable="true" />
                <PropertyColumn Property="@(c => c.Description)" Title="Description" Sortable="true" />
                <PropertyColumn Property="@(c => c.ClassName!)" Title="School" Sortable="true" />
                <PropertyColumn Property="@(c => c.Size!)" Title="Size" Sortable="true" />
                <TemplateColumn Title="Actions">
                    <FluentButton IconStart="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditClassUnit(context))" />
                    <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteClassUnit(context))" />
                </TemplateColumn>
            </FluentDataGrid>
        }
    </FluentStack>
</FluentLayout>

@code {
    [Inject] private SMSApiClient SMSApiClient { get; set; }
    [Inject] private NavigationManager _navigation { get; set; }
    [Inject] ISmsCoreToastService _toastService { get; set; }
    [Inject] IDialogService _dialogService { get; set; }
    [Inject] private IUserAuthState _userAuthState { get; set; }

    private List<SchoolClassDto>? classes;
    private bool loading = false;
    public SMSCoreAction Action { get; set; }
    string currentUser = string.Empty;
    private List<ClassUnitDto>? ClassUnits;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            var loadDataTask = LoadData();
            var loadClassDataTask = LoadClasses();
            var getCurrentUserTask = GetCurrentUser();
            await Task.WhenAll(loadDataTask, getCurrentUserTask, loadClassDataTask);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadData()
    {
        loading = true;
        var rsp = await SMSApiClient.GetFromJsonAsync<ApiResponse<IEnumerable<ClassUnitDto>>>("/api/classunits", null);
        if (rsp?.IsSuccess == true && rsp.Data != null)
        {
            ClassUnits = rsp.Data.ToList();
        }
        else
        {
            _toastService.ShowToastMessage("Error", rsp?.ErrorMessage, Color.Error, ToastIntent.Error);
        }
        loading = false;
    }

    private async Task GetCurrentUser()
    {
        currentUser = await _userAuthState.GetCurrentUser();
    }

    private async Task AddNew()
    {
        var unit = new ClassUnitDto()
        {
           Action = SMSCoreAction.Create,
           Classes = classes,
        };
        var dialog = await _dialogService.ShowPanelAsync<EditClassUnitPanel>(unit, new() { Title = "Add Class Unit" });
        var dialogResult = await dialog.Result;
        await HandleEditClassUnitDialogResult(dialogResult, unit);
    }

    private async Task EditClassUnit(ClassUnitDto unit)
    {
        unit.Classes = classes;
        unit.Action = SMSCoreAction.Edit;
        var dialog = await _dialogService.ShowPanelAsync<EditClassUnitPanel>(unit, new() { Title = "Edit Class Unit" });
        var dialogResult = await dialog.Result;
        await HandleEditClassUnitDialogResult(dialogResult, unit);
    }
    private async Task HandleEditClassUnitDialogResult(DialogResult result, ClassUnitDto unit)
    {
        if (result.Cancelled)
        {
            return;
        }
        loading = true;

        string message, actionTitle = string.Empty;

        if (unit.Action == SMSCoreAction.Create)
        {
            actionTitle = "Class Unit Setup";
            message = "Unit created successfully!";
        }
        else
        {
            actionTitle = "Class Unit Update";
            message = "Unit updated successfully!";
        }
        unit.CreatedByUserId = currentUser;
        classes = new List<SchoolClassDto>();

        var rsp = await SMSApiClient.PostAsync<ApiResponse<string>, ClassUnitDto>("/api/ClassUnits", unit);

        if (rsp?.IsSuccess == true && result.Data != null && rsp?.StatusCode != StatusCodes.Status500InternalServerError)
        {
            loading = false;
            await LoadData();
            await LoadClasses();

            _toastService.ShowToastMessage(actionTitle, message, Color.Success, ToastIntent.Success);
        }
        else
        {
            loading = false;
            await LoadData();
            await LoadClasses();
            _toastService.ShowToastMessage(actionTitle, rsp?.ErrorMessage, Color.Error, ToastIntent.Error);
        }
    }
    private async Task DeleteClassUnit(ClassUnitDto classUnit)
    {
        var dialog = await _dialogService.ShowConfirmationAsync(
            $"Are you sure you want to delete '{classUnit.Name}'?",
            "Yes", "No", "Delete Class Unit?");
        var result = await dialog.Result;
        if (result.Cancelled)
            return;

        _toastService.ShowToastMessage("Error", "Not yet implemented.", Color.Warning, ToastIntent.Warning);
         

        // var rsp = await SMSApiClient.DeleteAsync<ApiResponse<string>>($"/api/classunits/{classUnit.Id}");
        // if (rsp?.IsSuccess == true)
        // {
        //     await LoadData();
        //     ToastService.ShowToastMessage("Class Unit", "Deleted successfully!", Color.Success, ToastIntent.Success);
        // }
        // else
        // {
        //     ToastService.ShowToastMessage("Error", rsp?.ErrorMessage, Color.Error, ToastIntent.Error);
        // }
    }
    private async Task LoadClasses()
    {
        var rsp = await SMSApiClient.GetFromJsonAsync<ApiResponse<IEnumerable<SchoolClassDto>>>("/api/classes", null);
        if (rsp?.IsSuccess == true && rsp.Data != null)
        {
            classes = rsp.Data.ToList();
        }
        else
        {
            classes = new List<SchoolClassDto>();
            _toastService.ShowToastMessage("Error", rsp?.ErrorMessage, Color.Error, ToastIntent.Error);
        }
    }
}
